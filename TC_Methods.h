#ifndef TC_METHODS_H
#define TC_METHODS_H

#include <QObject>
#include <QMap>
#include <QStringList>

class TC_VideoSdkWrapper;


class TC_Methods : public QObject
{
    Q_OBJECT

public:
    explicit TC_Methods(TC_VideoSdkWrapper* videoSdkWrapper, QObject* parent = nullptr);
    TC_Methods() = delete;
    TC_Methods(const TC_Methods& other) = delete;
    TC_Methods& operator=(const TC_Methods& other) = delete;
    TC_Methods(TC_Methods&& other) = delete;
    TC_Methods& operator=(TC_Methods&& other) = delete;
    virtual ~TC_Methods() override;

    void accept();
    void acceptIncomingFileRequest(const QString& fileRequestId);
    void acceptInvitationToPodium();
    void acceptPeer(const QString& peerId);
    void acceptRequestCameraControl(const QString& callId);
    void acceptRequestToPodium(const QString& peerId);
    void activateLicense(const QString& key);
    void addPresetFromCurrentVideoCapturer();
    void addSlide(int fileId);
    void addToAbook(const QString& peerId, const QString& peerDn);
    void addToGroup(int groupId, const QString& peerId);
    void addVideoCapturerPreset(const QVariantMap& params);
    void allowRecord(const QString& peerId);
    void applyVideoCapturerPreset(const QString& presetId);
    void auth(const QString& role, const QString& type, const QString& credentials);
    void block(const QString& peerId);
    void call(const QString& peerId);
    void changeConferenceMode(bool isSmartMeeting);
    void changeCurrentMonitor(int monitorIndex);
    void changeVideoMatrixType(int matrixType);
    void changeWindowState(int windowState, bool stayOnTop);
    void chatClear(const QString& id);
    void clearCallHistory();
    void clearFileTransferHistory(bool deleteFilesFromDisk);
    void clearTokens();
    void connectToServer(const QString& server, int port);
    void connectToService(const QString& domain = "");
    void createConference(const QString& title
                          , const QString& confType
                          , bool autoAccept
                          , bool useWaitingRoom
                          , bool muteCamOnJoin
                          , bool muteMicOnJoin
                          , const QStringList& inviteList);
    void createGroup(const QString& name);
    void createNDIDevice(const QString& deviceId);
    void deleteData(const QString& containerName);
    void deleteFileTransferFile(int fileId);
    void deleteNDIDevice(const QString& deviceId);
    void denyRecord(const QString& peerId);
    void enableAudioReceiving(const QString& peerId, bool enable);
    void enableVideoReceiving(const QString& peerId, bool enable);
    void eraseCustomScheduler();
    void expandCallToMulti(const QString& title, const QStringList& inviteList);
    void fireMyEvent(const QString& data);
    void getAbook();
    void getAllUserContainersNames();
    void getAllVideoCapturerPresets();
    void getAppSndDev();
    void getAppState();
    void getAudioDelayDetectorInfo();
    void getAudioMute();
    void getAudioReceivingLevel(const QString& peerId);
    void getAuthInfo();
    void getAvailableServersList();
    void getBackground();
    void getBanList();
    void getBlur();
    void getBroadcastPicture();
    void getBroadcastSelfie();
    void getCallHistory(int count);
    void getChatLastMessages(const QString& id, int beginNumber, int count);
    void getComPort();
    void getConferenceParticipants();
    void getConferences();
    void getConnected();
    void getContactDetails(const QString& peerId);
    void getCreatedNDIDevices();
    void getCrop();
    void getCurrentUserProfileUrl();
    void getDisplayNameById(const QString& peerId);
    void getFileList();
    void getFileRequestInfo(const QString& fileRequestId);
    void getFileTransferAvailability();
    void getFileTransferHistory();
    void getGroups();
    void getHardware();
    void getHardwareKey();
    void getHttpServerSettings();
    void getHttpServerState();
    void getIncomingCameraControlRequests();
    void getIncomingFilesRequests();
    void getInfoWidgetsState();
    void getLastCallsViewTime();
    void getLastSelectedConference();
    void getLastUsedServersList(int count);
    void getLicenseServerStatus();
    void getLicenseType();
    void getListOfChats();
    void getLogin();
    void getLogo();
    void getMaxConfTitleLength();
    void getMicMute();
    void getModes();
    void getMonitorsInfo();
    void getNDIState();
    void getNoiseSuppression();
    void getOutgoingBitrate();
    void getOutgoingCameraControlRequests();
    void getOutgoingFilesRequests();
    void getOutputSelfVideoRotateAngle();
    void getProperties();
    void getPtzControls();
    void getRemotelyControlledCameras();
    void getRenderInfo();
    void getReplaceBackground();
    void getScheduler();
    void getServerDomain();
    void getSettings();
    void getSleepMode();
    void getSlideShowCache();
    void getSlideShowInfo();
    void getSystemInfo();
    void getTariffRestrictions();
    void getTokenForHttpServer();
    void getTrueConfRoomProKey();
    void getVideoMatrix();
    void getVideoMute();
    void getWebManagerUrl();
    void gotoPodium();
    void hangUp(bool forAll);
    void hideVideoSlot(const QString& callId);
    void inviteToConference(const QString& peerId);
    void inviteToPodium(const QString& peerId);
    void kickFromPodium(const QString& peerId);
    void kickPeer(const QString& peerId);
    void leavePodium();
    void loadData(const QString& containerName);
    void login(const QString& callId, const QString& password, bool encryptPassword);
    void logout();
    void moveVideoSlotToMonitor(const QString& callId, int monitorIndex);
    void openURLProtocol(const QString& url);
    void pinUser(const QString& peerId, bool isPinNeeded);
    void prepareCallIdForCall(const QString& callId);
    void productRegistrationOffline(int fileId);
    void ptzDown();
    void ptzLeft();
    void ptzRight();
    void ptzStop();
    void ptzUp();
    void ptzZoomDec();
    void ptzZoomInc();
    void rebootSystem();
    void reject();
    void rejectIncomingFileRequest(const QString& fileRequestId);
    void rejectInvitationToPodium();
    void rejectPeer(const QString& peerId);
    void rejectRequestCameraControl(const QString& callId);
    void rejectRequestToPodium(const QString& peerId);
    void remotelyControlledCameraPtzDown(const QString& cameraOwnerCallId);
    void remotelyControlledCameraPtzLeft(const QString& cameraOwnerCallId);
    void remotelyControlledCameraPtzRight(const QString& cameraOwnerCallId);
    void remotelyControlledCameraPtzUp(const QString& cameraOwnerCallId);
    void remotelyControlledCameraPtzZoomDec(const QString& cameraOwnerCallId);
    void remotelyControlledCameraPtzZoomInc(const QString& cameraOwnerCallId);
    void removeAllSlides(bool removeFromServer);
    void removeFromAbook(const QString& peerId);
    void removeFromGroup(int groupId, const QString& peerId);
    void removeFromServersList(const QString& serverName);
    void removeGroup(int groupId);
    void removeImageFromCachingQueue(int groupId);
    void removeSlide(int idx, bool removeFromServer);
    void removeVideoCapturerPreset(const QString& presetId);
    void removeVideoSlotFromMonitor(int monitorIndex);
    void renameGroup(int groupId, const QString& newName);
    void renameInAbook(const QString& peerId, const QString& peerDn);
    void requestParticipantCameraControl(const QString& callId);
    void restoreWindow();
    void saveData(const QString& containerName, const QString& data, const QString& flags);
    void searchContact(const QString& searchingString, int searchingTimeoutMsec, int searchingMask);
    void searchContact2(const QString& searchingString);
    void sendCommand(const QString& peerId, const QString& command);
    void sendFile(int fileId, const QString& peerId);
    void sendFileToConference(int fileId);
    void sendGroupMessage(const QString& message);
    void sendMessage(const QString& peerId, const QString& message);
    void sendStopContentSharing(const QString& peerId);
    void setAppSndDev(const QString& name, const QString& description);
    void setAudioCapturer(const QString& name, const QString& description);
    void setAudioMute(bool mute);
    void setAudioReceivingLevel(const QString& peerId, int level);
    void setAudioRenderer(const QString& name, const QString& description);
    void setAuthParams(const QString& userType, const QString& authType, const QString& authValue);
    void setBackground(int fileId);
    void setBlur(bool enabled);
    void setBroadcastSelfie(bool enabled, int fps);
    void setComPort(const QString& port);
    void setCrop(bool enable);
    void setCurrentPtzPropertyInverted(const QString& property, bool inverted);
    void setCustomScheduler(const QString& conferencesJsonStr);
    void setDefaultBackground();
    void setDefaultContentSource(const QString& name);
    void setDefaultLogo();
    void setExtStatus(int extStatus, const QString& additionalStatus);
    void setHttpServerSettings(const QMap<QString, QVariant>& settings);
    void setLastCallsViewed();
    void setLogo(int fileId, int mode);
    void setMicMute(bool mute);
    void setModeratorRole(const QString& peerId, bool moderator);
    void setModes(const QString& pin, const QString& mode);
    void setNDIState(bool enabled);
    void setNoiseSuppression(bool enabled);
    void setOutputSelfVideoRotateAngle(int rotateAngle);
    void setPanPos(int pos);
    void setParticipantPresenceInWaitingRoom(const QString& callId, bool inWaitingRoom);
    void setPtzDefaults();
    void setReplaceBackground(int fileId, bool enabled);
    void setSettings(const QMap<QString, QVariant>& settings);
    void setSleepMode(bool enabled);
    void setSlidePosition(int fromIdx, int toIdx);
    void setTiltPos(int pos);
    void setUsedApiVersion(const QString& version);
    void setVideoCapturer(const QString& name, const QString& description);
    void setVideoMute(bool mute);
    void setWaitingRoomState(bool isUsersMustBeInvited, bool enable);
    void setZoomPos(int pos);
    void showFirstSlide();
    void showLastSlide();
    void showNextSlide();
    void showPrevSlide();
    void showSlide(int idx);
    void showVideoSlot(const QString& callId);
    void shutdown(bool forAll);
    void shutdownSystem();
    void sortSlides();
    void startAudioDelayDetectorTest();
    void startBroadcastPicture(int fileId);
    void startCapture(int captureId);
    void startHttpServer();
    void startRemark();
    void startSlideShow(const QString& title, int startingIdx);
    void stopAudioDelayDetectorTest();
    void stopBroadcastPicture();
    void stopCachingAllImages();
    void stopCapture();
    void stopHttpServer();
    void stopSlideShow();
    void swapVideoSlots(const QString& callId1, const QString& callId2);
    void switchVideoFlow(const QString& callId, bool mainCamera);
    void testAudioCapturerStart();
    void testAudioCapturerStop();
    void testAudioRenderer();
    void toneDial(const QString& symbol, const QString& callId);
    void turnRemoteCamera(const QString& peerId, bool on);
    void turnRemoteMic(const QString& peerId, bool on);
    void turnRemoteSpeaker(const QString& peerId, bool on);
    void unblock(const QString& peerId);
    void updatePresetFromCurrentVideoCapturer(const QString& presetId);
    void updateVideoCapturerPreset(const QVariantMap& params);

protected:
    TC_VideoSdkWrapper* m_videoSdkWrapper;

    QString createJsonCommand(const QString& method, const QVariantMap& params = {});
};

#endif /* TC_METHODS_H */
